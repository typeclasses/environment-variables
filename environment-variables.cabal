cabal-version: 2.0

name: environment-variables
version: 1
synopsis: Working with system environment variables
build-type: Simple

description:
    .
    The 'Var' and 'Opt' types represent a
    variable name and a parser to turn a string from the
    environment into a Haskell value, where the case in which
    the variable name is not defined in the environment either
    can't or can be handled, respectively.
    Defining your vars this way, with the name and parser bundled
    together, is helpful when building collections of
    applications that have some environment requirements in
    common.
    .
    The 'Product' type represents a way to obtain a value from
    the environment by inspecting multiple environment variables.
    The advantage of using this type is that you can get more
    complete error output when there are errors related to more
    than one variable.
    .
    We also provide a polymorphic 'read' function that can be
    used to obtain variables, as defined by either of the types
    discussed above, from either the actual system environment or
    from a map data structure.
    The latter can be useful for testing your parsers with a mock
    environment.

library
    default-language: Haskell2010
    ghc-options: -Wall -fno-warn-unused-imports
    hs-source-dirs: .
    exposed-modules: Env

    other-modules:
        EnvData EnvFunctor MultiVar Name
        Var Problems VarConversions

    default-extensions:
        DeriveAnyClass DeriveDataTypeable DeriveFunctor
        DeriveGeneric DerivingStrategies DerivingVia
        FlexibleInstances FunctionalDependencies
        GADTs InstanceSigs LambdaCase
        GeneralizedNewtypeDeriving NoImplicitPrelude
        OverloadedStrings PatternSynonyms RankNTypes
        ScopedTypeVariables StandaloneDeriving TypeApplications ViewPatterns

    build-depends:
        base, containers, hashable, text, validation
